#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'glistening_ruby'

# Draw sphere with lighting
class Main
  include GlisteningRuby

  def initialize
    @sphere = Sphere[]
    @sphere.material.color = Color[1, 0.3, 0.1]
    @sphere.transform = identity.scale(0.3).translate(0, 0, 0.5)

    @light = PointLight[Point[-1.7, 1, 2], Color[1.0, 0.9, 0.6]]

    @camera = Point[0, 0, 1]
  end

  def progress(done, total)
    STDOUT << "#{100 * done / total}% done.\r"
  end

  def render(pixel, projection)
    cast_at = projection * pixel
    ray = Ray[@camera, (cast_at - @camera).normalize]
    hit = @sphere.intersect(ray).hit
    return unless hit

    point = ray.position(hit.t)
    normal = hit.object.normal_at(point)
    eye = -ray.direction
    color = hit.object.material.lighting(@light, point, eye, normal)
    @canvas[*pixel.xy] = color
  end

  def lit_sphere(size = 128)
    @canvas = Canvas[size, size]
    projection = identity.translate(1, 1).scale(size / 2).inverse.scale(1, -1)

    @canvas.each do |_, x, y|
      render(Point[x, y, 0], projection)
      progress(y, size) if x == y
    end
    self
  end

  def save(filename)
    File.open(filename, 'w') do |file|
      @canvas.to_ppm(file)
    end
  end
end

require 'pry'
Pry.start Main.new
