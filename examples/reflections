#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'pry'
require 'glistening_ruby'

# Render some reflections
class Main < GlisteningRuby::Base # rubocop:disable Metrics/ClassLength
  include GlisteningRuby

  def initialize # rubocop:disable Lint/MissingSuper
    @world = World.new do |world|
      setup_floor(world)
      setup_mirror(world)
      setup_spheres(world)

      world << PointLight[Point[0, 10, -10], Color.new(0.4, 0.5, 0.7)]
      world << PointLight[Point[5, 5, -10], Color.new(0.7, 0.5, 0.4)]
    end
  end

  def setup_floor(world)
    world << Plane.new do |s|
      s.material = Material.new do |m|
        m.pattern = Pattern::Blend.new do |b|
          b << Pattern::Stripe.new do |p|
            p << Color.new(0.3, 0.3, 0.3)
            p << Color.new(0.7, 0.7, 0.7)
            p.transform = identity.rotate_y('1/8'.to_r)
                                  .scale('1/8'.to_r**0.5)
          end
          b << Pattern::Stripe.new do |p|
            p << Color.new(0.7, 0.3, 0.2)
            p << Color.new(0.2, 0.3, 0.7)
            p.transform = identity.rotate_y('-1/8'.to_r)
                                  .scale('1/8'.to_r**0.5)
          end
          b.transform = identity.scale(2)
        end
        m.specular = 0
      end
    end
  end

  def setup_mirror(world)
    world << Plane.new do |s|
      s.material = Material.new do |m|
        m.color = [0.1, 0.1, 0.1]
        m.reflective = 0.9
        m.ambient = 0.1
        m.specular = 0.9
        m.diffuse = 0.2
      end
      s.transform = identity.rotate_x('1/4'.to_r)
                            .rotate_y('-1/9'.to_r)
                            .translate(-2, 0, 2)
    end
  end

  def setup_spheres(world)
    [
      {
        transform: identity.translate(-0.5, 1, 0.5),
        material: Material.new do |m|
          m.pattern = Pattern::Checkers.new do |p|
            p << [0.1, 1.0, 0.5] << [0.9, 0.0, 0.5]
            p.transform =
              identity.rotate_z('1/4'.to_r).rotate_y('1/8'.to_r).scale(2)
          end
          m.diffuse = 0.7
          m.specular = 0.3
          m.reflective = 0.1
        end
      },
      {
        transform: identity.scale(0.5).translate(1.5, 0.5, -0.5),
        material: Material.new do |m|
          m.pattern = Pattern::Gradient.new([0.8, 0.8, 0.2],
                                            [0.8, 0.2, 0.8],
                                            [0.2, 0.8, 0.2])
          m.pattern.transform = identity.rotate_z('1/8'.to_r)
          m.diffuse = 0.7
          m.specular = 0.3
          m.reflective = 0.2
        end
      },
      {
        transform: identity.scale(0.33).translate(-1.5, 0.33, -0.75),
        material: Material.new do |m|
          m.pattern = Pattern::Stripe.new([1.0, 0.8, 0.1], [0.0, 0.2, 0.9])
          m.pattern.transform =
            identity.rotate_z('1/8'.to_r).rotate_x('1/4'.to_r).scale(0.33)
          m.diffuse = 0.7
          m.specular = 0.3
        end
      }
    ].each do |cfg|
      world << Sphere.new do |s|
        s.transform = cfg[:transform]
        s.material = cfg[:material]
      end
    end
  end

  def render(width = 320, height = 256)
    t0 = Time.now
    camera = Camera.new(width, height, '1/8'.to_r) do |c|
      c.transform = ViewTransform[
        Point[3, 2, -5],
        Point[0, 1, 0],
        Vector[0, 1, 0]
      ]
    end

    @canvas = camera.render(@world)
    puts "Rendering time: #{Time.now - t0} s"
    self
  end

  def save(filename)
    File.open(filename, 'w') do |file|
      @canvas.to_ppm(file)
    end
  end
end
Pry.start Main
