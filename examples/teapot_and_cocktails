#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'pry'
require 'glistening_ruby'

# Render a hexagon
class Main < GlisteningRuby::Base
  include GlisteningRuby

  def initialize(version = 'low')
    @world = World.new do |world|
      setup_room(world)
      setup_teapot(world, version)
      setup_cocktail(world)
      world << PointLight[Point[-1.5, 2.5, -1.5], Color.new(1.0, 1.0, 1.0)]
    end
  end

  def setup_room(world)
    world << Cube.new do |s|
      s.material = Material.new do |m|
        m.pattern = Pattern::Checkers.new do |c|
          c << Color[0.5, 0.5, 0.5] << Color[0.75, 0.75, 0.75]
          c.transform = identity.translate(0.999, 0.999, 0).scale('1/8'.to_r)
        end
        m.diffuse = 0.5
        m.ambient = 0.3
        m.specular = 0.6
        m.reflective = 0.2
        m.shininess = 50
      end
      s.transform = identity.translate(0, 1, 0).scale(3)
    end
  end

  def setup_teapot(world, version)
    world << ObjFile.new(File.open(__dir__ + "/teapot-#{version}.obj")) do |g|
      g.transform = identity.rotate_x('-1/4'.to_r)
                            .scale('1/16'.to_r)
                            .rotate_y('-1/12'.to_r)
      g.material = Material.new do |m|
        m.color = Color[1.0, 0.8, 0.5]
        m.shininess = 300
        m.diffuse = 0.7
        m.ambient = 0.3
        m.reflective = 0.1
      end
    end
  end

  def setup_cocktail(world)
    drink = Material.new do |m|
      m.color = Color[0.15, 0.1, 0.05]
      m.ambient = 0.3
      m.diffuse = 0.3
      m.specular = 0.7
      m.reflective = 0.7
      m.transparency = 0.7
      m.refractive_index = 1.3
    end

    glass = Material.new do |m|
      m.color = Color[0, 0, 0]
      m.ambient = 0.2
      m.diffuse = 0.2
      m.specular = 0.9
      m.reflective = 0.9
      m.transparency = 0.9
      m.refractive_index = 1.5
    end

    world << Group.new do |g| # rubocop:disable Metrics/BlockLength
      g.transform = identity.scale(3.5)
                            .translate(0.8, 0.01, -0.5)
      g << Cone.new do |s|
        s.minimum = 0
        s.maximum = 0.9
        s.closed = true
        s.transform = identity.scale(0.09)
                              .translate(0, 0.11, 0)
        s.material = drink
      end

      g << Cone.new do |s|
        s.minimum = 0
        s.maximum = 1
        s.transform = identity.scale(0.1)
                              .translate(0, 0.1, 0)
        s.material = glass
      end

      g << Cone.new do |s|
        s.minimum = -1
        s.maximum = 0
        s.closed = true
        s.transform = identity.scale(0.08, 0.01, 0.08)
                              .translate(0, 0.01, 0)
        s.material = glass
      end

      g << Cylinder.new do |s|
        s.minimum = 0
        s.maximum = 1
        s.closed = true
        s.transform = identity.scale(0.01, 0.11, 0.01)
        s.material = glass
      end
    end
  end

  def render(width = 320, height = 256, limit: World::RECURSION_LIMIT)
    t0 = Time.now
    camera = Camera.new(width, height, '1/8'.to_r) do |c|
      c.progress = lambda do |x, y|
        pct = Rational(y * width + x, width * height)
        next if pct.zero?

        t1 = Time.now
        STDOUT << "#{(pct * 100).to_i}% done, "
        STDOUT << "#{((t1 - t0) * (1.0 - pct) / pct).to_i} s to go.  \r"
      end
      c.transform = ViewTransform[
        Point[1.0, 1.2, -2.9],
        Point[0.05, 0.3, 0.8],
        Vector[0, 1, 0]
      ]
    end

    @canvas = camera.render(@world, limit: limit)
    puts "Rendering time: #{Time.now - t0} s"
    self
  end

  def save(filename)
    File.open(filename, 'w') do |file|
      @canvas.to_ppm(file)
    end
  end
end
Pry.start Main
